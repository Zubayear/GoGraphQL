// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	ent "github.com/Zubayear/song-ql/ent"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ISongRepository is an autogenerated mock type for the ISongRepository type
type ISongRepository struct {
	mock.Mock
}

// AddArtist provides a mock function with given fields: ctx, artist, songId
func (_m *ISongRepository) AddArtist(ctx context.Context, artist *ent.Artist, songId uuid.UUID) (*ent.Artist, error) {
	ret := _m.Called(ctx, artist, songId)

	var r0 *ent.Artist
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Artist, uuid.UUID) *ent.Artist); ok {
		r0 = rf(ctx, artist, songId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Artist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ent.Artist, uuid.UUID) error); ok {
		r1 = rf(ctx, artist, songId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddSong provides a mock function with given fields: ctx, song
func (_m *ISongRepository) AddSong(ctx context.Context, song *ent.Song) (*ent.Song, error) {
	ret := _m.Called(ctx, song)
	var r0 *ent.Song
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Song) *ent.Song); ok {
		r0 = rf(ctx, song)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Song)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ent.Song) error); ok {
		r1 = rf(ctx, song)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArtistsBySongId provides a mock function with given fields: ctx, songId
func (_m *ISongRepository) GetArtistsBySongId(ctx context.Context, songId uuid.UUID) ([]*ent.Artist, error) {
	ret := _m.Called(ctx, songId)

	var r0 []*ent.Artist
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*ent.Artist); ok {
		r0 = rf(ctx, songId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Artist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, songId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSongById provides a mock function with given fields: ctx, songId
func (_m *ISongRepository) GetSongById(ctx context.Context, songId uuid.UUID) (*ent.Song, error) {
	ret := _m.Called(ctx, songId)

	var r0 *ent.Song
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *ent.Song); ok {
		r0 = rf(ctx, songId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Song)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, songId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSongs provides a mock function with given fields: ctx
func (_m *ISongRepository) GetSongs(ctx context.Context) ([]*ent.Song, error) {
	ret := _m.Called(ctx)

	var r0 []*ent.Song
	if rf, ok := ret.Get(0).(func(context.Context) []*ent.Song); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Song)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
