// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/Zubayear/song-ql/graph/model"
)

// QueryResolver is an autogenerated mock type for the QueryResolver type
type QueryResolver struct {
	mock.Mock
}

// Artists provides a mock function with given fields: ctx
func (_m *QueryResolver) Artists(ctx context.Context) ([]*model.Artist, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Artist
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Artist); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Artist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtistsBySongID provides a mock function with given fields: ctx, input
func (_m *QueryResolver) ArtistsBySongID(ctx context.Context, input string) ([]*model.Artist, error) {
	ret := _m.Called(ctx, input)

	var r0 []*model.Artist
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Artist); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Artist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SongByID provides a mock function with given fields: ctx, input
func (_m *QueryResolver) SongByID(ctx context.Context, input string) (*model.Song, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.Song
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Song); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Song)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Songs provides a mock function with given fields: ctx
func (_m *QueryResolver) Songs(ctx context.Context) ([]*model.Song, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Song
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Song); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Song)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
